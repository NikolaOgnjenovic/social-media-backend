# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

### NoDocs ###
POST    /api/v1/images            controllers.ImageController.create
### NoDocs ###
GET     /api/v1/images            controllers.ImageController.getAll

GET /api/v1/images controllers.ImageController.getAllByUserId

### NoDocs ###
GET     /api/v1/images/:id        controllers.ImageController.getById(id: Long)
### NoDocs ###
GET     /api/v1/images/:id/file     controllers.ImageController.getImageFileById(id: Long)
### NoDocs ###
GET     /api/v1/images/tags/:tags       controllers.ImageController.getByTags(tags: String)
### NoDocs ###
GET     /api/v1/images/title/:title        controllers.ImageController.getByTitle(title: String)
### NoDocs ###
PATCH     /api/v1/images/:id/tags        controllers.ImageController.updateTags(id: Long)
### NoDocs ###
PATCH     /api/v1/images/:id/likeCount       controllers.ImageController.updateLikeCount(id: Long)
### NoDocs ###
PATCH     /api/v1/images/:id/editorIds        controllers.ImageController.updateEditorIds(id: Long)
### NoDocs ###
PATCH     /api/v1/images/:id/folderId        controllers.ImageController.updateFolderId(id: Long)
### NoDocs ###
DELETE  /api/v1/images/:id        controllers.ImageController.delete(id: Long)

###
#   requestBody:
#     content:
#       application/json:
#         schema:
#           type: object
#           $ref: "#/definitions/dtos.NewFolder"
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Folder'
###
POST    /api/v1/folders            controllers.FolderController.create
###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Folder'
###
GET     /api/v1/folders            controllers.FolderController.getAll
GET /api/v1/folders    controllers.FolderController.getAllByUserId

GET     /api/v1/images/folder/:folderId        controllers.ImageController.getByFolderId(folderId: Long)
###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Folder'
#     404:
#       description: Folder with specified ID was not found
###
GET     /api/v1/folders/:id        controllers.FolderController.getById(id: Long)
###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Folder'
#     404:
#       description: Folder with specified author ID was not found
###
GET     /api/v1/folders/author/:authorId        controllers.FolderController.getByAuthorId(authorId: Long)

###
#   responses:
#     204:
#       description: Folder with specified id has been deleted
#     404:
#       description: Folder with specified ID was not found
###
DELETE  /api/v1/folders/:id        controllers.FolderController.delete(id: Long)

###
#   requestBody:
#     content:
#       application/json:
#         schema:
#           type: object
#           $ref: "#/definitions/models.Folder"
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Folder'
###
PATCH     /api/v1/folders/:id/title        controllers.FolderController.updateTitle(id: Long)

###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Comment'
###
GET     /api/v1/comments            controllers.CommentController.getAll
GET /api/v1/comments   controllers.CommentController.getAllByUserId

###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Comment'
#     404:
#       description: Comment with specified ID was not found
###
GET     /api/v1/comments/:id        controllers.CommentController.getById(id: Long)

###
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Comment'
#     404:
#       description: Comment with specified author ID was not found
###
GET     /api/v1/comments/author/:authorId        controllers.CommentController.getByAuthorId(authorId: Long)

GET     /api/v1/comments/imageId/:imageId       controllers.CommentController.getByImageId(imageId: Long)
###
#   requestBody:
#     content:
#       application/json:
#         schema:
#           type: object
#           $ref: "#/definitions/dtos.NewComment"
#   responses:
#     200:
#       schema:
#         $ref: '#/definitions/models.Comment'
###
POST    /api/v1/comments            controllers.CommentController.create

PATCH    /api/v1/comments/:id/content        controllers.CommentController.updateContent(id: Long)

PATCH    /api/v1/comments/:id/likeCount       controllers.CommentController.updateLikeCount(id: Long)

###
#   responses:
#     204:
#       description: Comment with specified id has been deleted
#     404:
#       description: Comment with specified ID was not found
###
DELETE  /api/v1/comments/:id        controllers.CommentController.delete(id: Long)

DELETE      /api/v1/comments/imageId/:imageId    controllers.CommentController.deleteByImageId(imageId: Long)

# Map static resources from the /public folder to the /assets URL path

POST /api/v1/users  controllers.UserController.create()
GET /api/v1/users   controllers.UserController.getAll()
GET /api/v1/users/:id   controllers.UserController.getById(id: Long)
POST /api/v1/login controllers.UserController.login()
PATCH /api/v1/users/:id/password controllers.UserController.updatePassword(id: Long)
DELETE /api/v1/users/:id    controllers.UserController.delete(id: Long)

### NoDocs ###
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)